# ellipse points
out <- ellipse::ellipse(Sigma, centre = mu , level = p.ell)
ell <- rbind(ell, out)
post.id <- c(post.id, rep(j, nrow(out)))
}
ell <- as.data.frame(ell)
ell$rep <- post.id
all_ellipses[[i]] <- ell
}
all_ellipses
ellipse_df <- bind_rows(all_ellipses, .id = "id")
tail(ellipse_df)
# now we need the group and community names
# extract them from the ellipses.posterior list
group_comm_names <- names(ellipses.posterior)
group_comm_names
str(group_comm_names)
# split them and conver to a matrix, NB byrow = T
split_group_comm <- matrix(unlist(strsplit(group_comm_names, "[.]")),
nrow(ellipse_df), 2, byrow = TRUE)
split_group_comm
ellipse_df$community <- split_group_comm[,1]
# ellipse_df$group     <- split_group_comm[,2]
ellipse_df <- dplyr::rename(ellipse_df, iso1 = x, iso2 = y)
str(ellipse_df)
ellipse_df$community <- c(rep("IDLE",times=n.posts*100),rep("IM",times=n.posts*100),
rep("IP",times=n.posts*100))
ellipse_df$community
ellipse_df$id2 <- paste(ellipse_df$id, ellipse_df$rep, sep= "_")
first.plot <- ggplot(data = data_BF, aes(iso1, iso2)) +
ylab(expression(paste(delta^{15}, "N (\u2030)")))+
xlab(expression(paste(delta^{13}, "C (\u2030)"))) +
theme(text = element_text(size=17)) +
theme_bw() +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),panel.background = element_blank()) +
geom_path(data = ellipse_df,
mapping = aes(iso1, iso2,
color = factor(community),
fill = NULL),
group = ellipse_df$id2,
fill = NA,
alpha = 0.5)
print(first.plot)
second.plot  <- first.plot + facet_wrap(~factor(community))
print(second.plot)
set.seed(1)
library(SIBER)
library(ggplot2)
library(magrittr) # to enable piping
library(dplyr)
library(rjags)
library(ellipse)
# load in the included demonstration dataset
data_BF <- read.csv ("/Users/user/documents/Publicaciones/Analisis Isotopos/SIBER_Regional/CNData_PPA_SIBER_Archipelagos.csv")
data_BF
# create the siber object
siber.example<- createSiberObject(data_BF)
# Create lists of plotting arguments to be passed onwards to each
# of the three plotting functions.
community.hulls.args <- list(col = 1, lty = 3, lwd = 3)
rm(list=ls())
graphics.off()
set.seed(1)
library(SIBER)
library(ggplot2)
library(magrittr) # to enable piping
library(dplyr)
library(rjags)
library(ellipse)
# load in the included demonstration dataset
data_BF <- read.csv ("/Users/user/documents/Publicaciones/Analisis Isotopos/SIBER_Regional/CNData_PPA_SIBER_Archipelagos.csv")
data_BF
# create the siber object
siber.example<- createSiberObject(data_BF)
# Create lists of plotting arguments to be passed onwards to each
# of the three plotting functions.
community.hulls.args <- list(col = 1, lty = 3, lwd = 3)
group.ellipses.args  <- list(n = 100, p.interval = NULL, lty = 1, lwd = 2)
group.hull.args      <- list(lty = 2, col = "grey20")
par(mfrow=c(1,1))
plotSiberObject(siber.example,
ax.pad = 2,
hulls = F, community.hulls.args,
ellipses = T, group.ellipses.args,
group.hulls = F, group.hull.args,
bty = "L",
iso.order = c(1,2),
xlab = expression({delta}^13*C~'\u2030'),
ylab = expression({delta}^15*N~'\u2030')
)
group.ML <- groupMetricsML(siber.example)
group.ML
# options for running jags
parms <- list()
parms$n.iter <- 2 * 10^4   # number of iterations to run the model for
parms$n.burnin <- 1 * 10^3 # discard the first set of values
parms$n.thin <- 10     # thin the posterior by this many
parms$n.chains <- 2        # run this many chains
# define the priors
priors <- list()
priors$R <- 1 * diag(2)
priors$k <- 2
priors$tau.mu <- 1.0E-3
# fit the ellipses which uses an Inverse Wishart prior
# on the covariance matrix Sigma, and a vague normal prior on the
# means. Fitting is via the JAGS method.
ellipses.posterior <- siberMVN(siber.example, parms, priors)
str(ellipses.posterior)
SEA.B <- siberEllipses(ellipses.posterior)
SEA.B
siberDensityPlot(SEA.B, xticklabels = c("BF","IMGJ","IMRV","IMSL","IP","SJ"),
ylims = c(0,20),
xlab = c("Community | Group"),
ylab = expression("Standard Ellipse Area " ('\u2030' ^2) ),
bty = "L",
las = 1,
main = "SIBER ellipses on each group"
)
# Add red x's for the ML estimated SEA-c
points(1:ncol(SEA.B), group.ML[3,], col="red", pch = "x", lwd = 2)
posterior.means <- extractPosteriorMeans(siber.example,ellipses.posterior)
#Layman Bayes does not work because it looks at community level!!
layman.bayes <- bayesianLayman(posterior.means)
layman.bayes
# extract the centroids from the fitted model object
centroids <- siberCentroids(ellipses.posterior)
head(centroids)
# calculate pairwise polar vectors among all groups
# this is not actually used in this example
angles_distances <- allCentroidVectors(centroids)
angles_distances
laymanMetrics(data_BF[,1],data_BF[,2])
plot()
bayesianLayman()
# Dibujar posterior Bayesian ellipses
## Now we want to create some plots of some sample ellipses from these distributions. We need to create a data.frame object of all the ellipses for each group. In this example we simply take the first 10 posterior draws assuming them to be independent of one another, but you could take a random sample if you prefer.
# how many of the posterior draws do you want?
n.posts <- 100
# decide how big an ellipse you want to draw
p.ell <- 0.5
# for a standard ellipse use
# p.ell <- pchisq(1,2)
# a list to store the results
all_ellipses <- list()
# loop over groups
for (i in 1:length(ellipses.posterior)){
# a dummy variable to build in the loop
ell <- NULL
post.id <- NULL
for ( j in 1:n.posts){
# covariance matrix
Sigma  <- matrix(ellipses.posterior[[i]][j,1:4], 2, 2)
# mean
mu     <- ellipses.posterior[[i]][j,5:6]
# ellipse points
out <- ellipse::ellipse(Sigma, centre = mu , level = p.ell)
ell <- rbind(ell, out)
post.id <- c(post.id, rep(j, nrow(out)))
}
ell <- as.data.frame(ell)
ell$rep <- post.id
all_ellipses[[i]] <- ell
}
all_ellipses
ellipse_df <- bind_rows(all_ellipses, .id = "id")
tail(ellipse_df)
# now we need the group and community names
# extract them from the ellipses.posterior list
group_comm_names <- names(ellipses.posterior)
group_comm_names
str(group_comm_names)
# split them and conver to a matrix, NB byrow = T
split_group_comm <- matrix(unlist(strsplit(group_comm_names, "[.]")),
nrow(ellipse_df), 2, byrow = TRUE)
split_group_comm
ellipse_df$community <- split_group_comm[,1]
# ellipse_df$group     <- split_group_comm[,2]
ellipse_df <- dplyr::rename(ellipse_df, iso1 = x, iso2 = y)
str(ellipse_df)
ellipse_df$community <- c(rep("IDLE",times=n.posts*100),rep("IM",times=n.posts*100),
rep("IP",times=n.posts*100))
ellipse_df$community
ellipse_df$id2 <- paste(ellipse_df$id, ellipse_df$rep, sep= "_")
## Now to create the plots. First plot all the raw data as we want.
first.plot <- ggplot(data = data_BF, aes(iso1, iso2)) +
ylab(expression(paste(delta^{15}, "N (\u2030)")))+
xlab(expression(paste(delta^{13}, "C (\u2030)"))) +
theme(text = element_text(size=17)) +
theme_bw() +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),panel.background = element_blank()) +
geom_path(data = ellipse_df,
mapping = aes(iso1, iso2,
color = factor(community),
fill = NULL),
group = ellipse_df$id2,
fill = NA,
alpha = 0.5)
print(first.plot)
first.plot <- ggplot(data = data_BF, aes(iso1, iso2)) +
ylab(expression(paste(delta^{15}, "N (\u2030)")))+
xlab(expression(paste(delta^{13}, "C (\u2030)"))) +
theme(text = element_text(size=17)) +
theme_bw() +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),panel.background = element_blank()) +
geom_polygon(data = ellipse_df,
mapping = aes(iso1, iso2,
color = factor(community),
fill = NULL),
group = ellipse_df$id2,
fill = NA,
alpha = 0.5)
print(first.plot)
first.plot <- ggplot(data = data_BF, aes(iso1, iso2)) +
ylab(expression(paste(delta^{15}, "N (\u2030)")))+
xlab(expression(paste(delta^{13}, "C (\u2030)"))) +
theme(text = element_text(size=17)) +
theme_bw() +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),panel.background = element_blank()) +
geom_path(data = ellipse_df,
mapping = aes(iso1, iso2,
color = factor(community),
fill = NULL),
group = ellipse_df$id2,
fill = NA,
alpha = 1)
print(first.plot)
rm(list=ls())
graphics.off()
set.seed(1)
library(SIBER)
library(ggplot2)
library(magrittr) # to enable piping
library(dplyr)
library(rjags)
library(ellipse)
# load in the included demonstration dataset
data_BF <- read.csv ("/Users/user/documents/Publicaciones/Analisis Isotopos/SIBER_Regional/CNData_PPA_SIBER_Archipelagos.csv")
data_BF
rm(list=ls())
graphics.off()
set.seed(1)
library(SIBER)
library(ggplot2)
library(magrittr) # to enable piping
library(dplyr)
library(rjags)
library(ellipse)
# load in the included demonstration dataset
data_BF <- read.csv ("/Users/user/documents/Publicaciones/Analisis Isotopos/SIBER_Regional/CNData_PPA_SIBER_Archipelagos.csv")
data_BF
# create the siber object
siber.example<- createSiberObject(data_BF)
# Create lists of plotting arguments to be passed onwards to each
# of the three plotting functions.
community.hulls.args <- list(col = 1, lty = 3, lwd = 3)
group.ellipses.args  <- list(n = 100, p.interval = NULL, lty = 1, lwd = 2)
group.hull.args      <- list(lty = 2, col = "grey20")
par(mfrow=c(1,1))
plotSiberObject(siber.example,
ax.pad = 2,
hulls = F, community.hulls.args,
ellipses = T, group.ellipses.args,
group.hulls = F, group.hull.args,
bty = "L",
iso.order = c(1,2),
xlab = expression({delta}^13*C~'\u2030'),
ylab = expression({delta}^15*N~'\u2030')
)
group.ML <- groupMetricsML(siber.example)
group.ML
# options for running jags
parms <- list()
parms$n.iter <- 2 * 10^4   # number of iterations to run the model for
parms$n.burnin <- 1 * 10^3 # discard the first set of values
parms$n.thin <- 10     # thin the posterior by this many
parms$n.chains <- 2        # run this many chains
# define the priors
priors <- list()
priors$R <- 1 * diag(2)
priors$k <- 2
priors$tau.mu <- 1.0E-3
# fit the ellipses which uses an Inverse Wishart prior
# on the covariance matrix Sigma, and a vague normal prior on the
# means. Fitting is via the JAGS method.
ellipses.posterior <- siberMVN(siber.example, parms, priors)
str(ellipses.posterior)
SEA.B <- siberEllipses(ellipses.posterior)
SEA.B
siberDensityPlot(SEA.B, xticklabels = c("BF","IMGJ","IMRV","IMSL","IP","SJ"),
ylims = c(0,20),
xlab = c("Community | Group"),
ylab = expression("Standard Ellipse Area " ('\u2030' ^2) ),
bty = "L",
las = 1,
main = "SIBER ellipses on each group"
)
# Add red x's for the ML estimated SEA-c
points(1:ncol(SEA.B), group.ML[3,], col="red", pch = "x", lwd = 2)
posterior.means <- extractPosteriorMeans(siber.example,ellipses.posterior)
#Layman Bayes does not work because it looks at community level!!
layman.bayes <- bayesianLayman(posterior.means)
layman.bayes
# extract the centroids from the fitted model object
centroids <- siberCentroids(ellipses.posterior)
head(centroids)
par(mfrow=c(1,1))
plotSiberObject(siber.example,
ax.pad = 2,
hulls = F, community.hulls.args,
ellipses = T, group.ellipses.args,
group.hulls = F, group.hull.args,
bty = "L",
iso.order = c(1,2),
xlab = expression({delta}^13*C~'\u2030'),
ylab = expression({delta}^15*N~'\u2030')
)
group.ellipses.args  <- list(n = 100, p.interval = .95, lty = 1, lwd = 2)
group.hull.args      <- list(lty = 2, col = "grey20")
par(mfrow=c(1,1))
plotSiberObject(siber.example,
ax.pad = 2,
hulls = F, community.hulls.args,
ellipses = T, group.ellipses.args,
group.hulls = F, group.hull.args,
bty = "L",
iso.order = c(1,2),
xlab = expression({delta}^13*C~'\u2030'),
ylab = expression({delta}^15*N~'\u2030')
)
# options for running jags
parms <- list()
parms$n.iter <- 2 * 10^4   # number of iterations to run the model for
parms$n.burnin <- 1 * 10^3 # discard the first set of values
parms$n.thin <- 10     # thin the posterior by this many
parms$n.chains <- 2        # run this many chains
# define the priors
priors <- list()
priors$R <- 1 * diag(2)
priors$k <- 2
priors$tau.mu <- 1.0E-3
# fit the ellipses which uses an Inverse Wishart prior
# on the covariance matrix Sigma, and a vague normal prior on the
# means. Fitting is via the JAGS method.
ellipses.posterior <- siberMVN(siber.example, parms, priors)
str(ellipses.posterior)
SEA.B <- siberEllipses(ellipses.posterior)
SEA.B
siberDensityPlot(SEA.B, xticklabels = c("BF","IMGJ","IMRV","IMSL","IP","SJ"),
ylims = c(0,20),
xlab = c("Community | Group"),
ylab = expression("Standard Ellipse Area " ('\u2030' ^2) ),
bty = "L",
las = 1,
main = "SIBER ellipses on each group"
)
# Add red x's for the ML estimated SEA-c
points(1:ncol(SEA.B), group.ML[3,], col="red", pch = "x", lwd = 2)
posterior.means <- extractPosteriorMeans(siber.example,ellipses.posterior)
#Layman Bayes does not work because it looks at community level!!
layman.bayes <- bayesianLayman(posterior.means)
layman.bayes
# extract the centroids from the fitted model object
centroids <- siberCentroids(ellipses.posterior)
head(centroids)
# calculate pairwise polar vectors among all groups
# this is not actually used in this example
angles_distances <- allCentroidVectors(centroids)
angles_distances
laymanMetrics(data_BF[,1],data_BF[,2])
plot()
bayesianLayman()
# how many of the posterior draws do you want?
n.posts <- 100
# decide how big an ellipse you want to draw
p.ell <- 0.5
# for a standard ellipse use
# p.ell <- pchisq(1,2)
# a list to store the results
all_ellipses <- list()
# loop over groups
for (i in 1:length(ellipses.posterior)){
# a dummy variable to build in the loop
ell <- NULL
post.id <- NULL
for ( j in 1:n.posts){
# covariance matrix
Sigma  <- matrix(ellipses.posterior[[i]][j,1:4], 2, 2)
# mean
mu     <- ellipses.posterior[[i]][j,5:6]
# ellipse points
out <- ellipse::ellipse(Sigma, centre = mu , level = p.ell)
ell <- rbind(ell, out)
post.id <- c(post.id, rep(j, nrow(out)))
}
ell <- as.data.frame(ell)
ell$rep <- post.id
all_ellipses[[i]] <- ell
}
all_ellipses
ellipse_df <- bind_rows(all_ellipses, .id = "id")
tail(ellipse_df)
# now we need the group and community names
# extract them from the ellipses.posterior list
group_comm_names <- names(ellipses.posterior)
group_comm_names
source('~/Documents/Publicaciones/Analisis Isotopos/SIBER_Regional/SIBERRegional_PPA2016.R', echo=TRUE)
str(group_comm_names)
# now we need the group and community names
# extract them from the ellipses.posterior list
group_comm_names <- names(ellipses.posterior)
group_comm_names
str(group_comm_names)
# split them and conver to a matrix, NB byrow = T
split_group_comm <- matrix(unlist(strsplit(group_comm_names, "[.]")),
nrow(ellipse_df), 2, byrow = TRUE)
ellipse_df <- bind_rows(all_ellipses, .id = "id")
all_ellipses
all_ellipses[[i]] <- ell
# for a standard ellipse use
# p.ell <- pchisq(1,2)
# a list to store the results
all_ellipses <- list()
# loop over groups
for (i in 1:length(ellipses.posterior)){
# a dummy variable to build in the loop
ell <- NULL
post.id <- NULL
for ( j in 1:n.posts){
# covariance matrix
Sigma  <- matrix(ellipses.posterior[[i]][j,1:4], 2, 2)
# mean
mu     <- ellipses.posterior[[i]][j,5:6]
# ellipse points
out <- ellipse::ellipse(Sigma, centre = mu , level = p.ell)
ell <- rbind(ell, out)
post.id <- c(post.id, rep(j, nrow(out)))
}
ell <- as.data.frame(ell)
ell$rep <- post.id
all_ellipses[[i]] <- ell
}
bayesianLayman()
# how many of the posterior draws do you want?
n.posts <- 100
# decide how big an ellipse you want to draw
p.ell <- 0.5
# for a standard ellipse use
# p.ell <- pchisq(1,2)
# a list to store the results
all_ellipses <- list()
# loop over groups
for (i in 1:length(ellipses.posterior)){
# a dummy variable to build in the loop
ell <- NULL
post.id <- NULL
for ( j in 1:n.posts){
# covariance matrix
Sigma  <- matrix(ellipses.posterior[[i]][j,1:4], 2, 2)
# mean
mu     <- ellipses.posterior[[i]][j,5:6]
# ellipse points
out <- ellipse::ellipse(Sigma, centre = mu , level = p.ell)
ell <- rbind(ell, out)
post.id <- c(post.id, rep(j, nrow(out)))
}
ell <- as.data.frame(ell)
ell$rep <- post.id
all_ellipses[[i]] <- ell
}
all_ellipses
ellipse_df <- bind_rows(all_ellipses, .id = "id")
tail(ellipse_df)
# now we need the group and community names
# extract them from the ellipses.posterior list
group_comm_names <- names(ellipses.posterior)
group_comm_names
str(group_comm_names)
# split them and conver to a matrix, NB byrow = T
split_group_comm <- matrix(unlist(strsplit(group_comm_names, "[.]")),
nrow(ellipse_df), 2, byrow = TRUE)
split_group_comm
ellipse_df$community <- split_group_comm[,1]
# ellipse_df$group     <- split_group_comm[,2]
ellipse_df <- dplyr::rename(ellipse_df, iso1 = x, iso2 = y)
str(ellipse_df)
ellipse_df$community <- c(rep("IDLE",times=n.posts*100),rep("IM",times=n.posts*100),
rep("IP",times=n.posts*100))
ellipse_df$community
ellipse_df$id2 <- paste(ellipse_df$id, ellipse_df$rep, sep= "_")
first.plot <- ggplot(data = data_BF, aes(iso1, iso2)) +
ylab(expression(paste(delta^{15}, "N (\u2030)")))+
xlab(expression(paste(delta^{13}, "C (\u2030)"))) +
theme(text = element_text(size=17)) +
theme_bw() +
theme(panel.grid.minor = element_blank(), panel.grid.major = element_blank(),panel.background = element_blank()) +
geom_path(data = ellipse_df,
mapping = aes(iso1, iso2,
color = factor(community),
fill = NULL),
group = ellipse_df$id2,
fill = NA,
alpha = 1)
print(first.plot)
setwd("~/Documents/WebSIGLA/grayscale/")
rm(list = ls())
dev.off()
gc(reset=TRUE)
## Check Hugo Version
blogdown::hugo_version()
library(blogdown)
serve_site()
serve_site()
